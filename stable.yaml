#parent=..\global.yaml
---
repo: &repo https://github.com/CodeOptimist/rimworld-jobs-of-opportunity

_anchors:
  - !parent &global_ModMetaData ModMetaData

ModMetaData: !merge
  <: *global_ModMetaData
  url: *repo
  name: Jobs of Opportunity (While You're Up)
  packageId: CodeOptimist.JobsOfOpportunity
  supportedVersions:
    - 1.1
    - 1.2
  incompatibleWith:
    - hoodie.whileyoureup
    - kevlou127.WhileHYouOreHUpHQ1V0S

published_file_id: 2034960453
preview_from_path: '{out_dir}\..\JoO.png'

intro: &intro |-
  Vanilla's opportunistic hauling, only better. Compatible with existing saves. Any load order.

  [img]https://i.imgur.com/tbpLbha.gif[/img]
stable_intro: *intro

header: |-
  [b]A pawn's job will say "Opportunistically", otherwise it's a different mod[/b] (e.g. normal hauling; normal hauling with [url=https://steamcommunity.com/sharedfiles/filedetails/?id=2277459062]Pick Up And Haul[/url], or triggered by [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1561769193]Common Sense[/url]).

  [i]@Modders:[/i] if you set [i]allowOpportunisticPrefix[/i] to [i]false[/i] for a JobDef, it won't allow opportunistic jobs. This is a vanilla feature.

footer: |-


  [h1]Performance[/h1]

  [h1]Compatibility[/h1]

  [h1]Report Bugs[/h1]
  1. Please save a game when it occurs, then reload to verify it reoccurs (if not you may need to save seconds [i]before[/i] it happens).
  2. Disable JoO from options (no restart). Perhaps disable PUAH (requires restart). Reload game.
  3. If the bug doesn't reoccur, send me this save game ([i]Files -> Open save folder[/i] from [url=https://rimworldwiki.com/wiki/Modding_Tutorials/Testing_mods#Development_mode]Debug log[/url]), via a link or through [url={discord}]Discord[/url].

  It's okay if you have a ton of mods, though the fewer the better.
  This method will save me hours upon hours of setup and get issues fixed quickly.

  [h1]Background[/h1]
  I began with the intention to [url=https://gist.github.com/CodeOptimist/5a740dd803fc370ec43f22ffa8bc953d#file-utils-cs-L48]fork[/url] [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1544626521][i]kevlou's[/i] While You're Up[/url], until I saw the [url=https://github.com/CodeOptimist/rimworld-jobs-of-opportunity/blob/29391b0a075a1dd77d4788777b0137e26390328c/Source/Patch_TryOpportunisticJob.cs]improved version Ludeon added[/url] to the core game. Since WYU appears discontinued, and this in its spirit, I hope to get away with carrying on the name ♥.

  These (now adjustable) settings show [url=https://steamuserimages-a.akamaihd.net/ugc/1000305627047582524/6DCE6BD8630614062AADAFAF2C441451BADCDFCF/]how vanilla does opportunistic hauling[/url].
  And for those curious, here are the [url=https://i.imgur.com/eRSl8t0.png]settings for the original While You're Up[/url] (not recommended).

  Although tighter than vanilla's, these fewer checks gave his mod extra hauling opportunities even on 1.0, though it triggered on a [url=https://gist.github.com/CodeOptimist/5a740dd803fc370ec43f22ffa8bc953d#file-hauladder-cs-L44]hardcoded list of jobs[/url].
  Now that these checks are merely [i]preferred[/i], and we trigger for all jobs, it's the best of both worlds!

features:
  - title: More hauling opportunities
    at: 1.0.0
    desc: |-
      Vanilla requires a haulable be near your [b]start[/b] position, and its stockpile near your job. Too far and it won't be hauled, [i]even if it's directly in your path[/i]. We can do better.

      We prefer the proximity requirements set by vanilla, but relax them to find valid haulables. Adjustable for performance (see tooltips).

  - title: Haul to inventory
    at: 1.4.0
    desc: |-
      Custom use of [url=https://steamcommunity.com/sharedfiles/filedetails/?id=2277459062]Pick Up And Haul[/url]! (Optional. Installed separately.)

      The way we control PUAH, only items qualifying as opportunistic will be gathered: solves issue with spread-out stockpiles and [url=https://youtu.be/97aNVniNlGE]unloading madness[/url].
      (Dedicated haul jobs behave as normal, gathering as much as they can.)

  - title: Optimize hauling ingredients
    at: 1.6.0
    desc: |-
      If hauling ingredients to storage would bring them closer to their workbench, do that first (grabbing extra).

      Unticks similar setting in [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1561769193]Common Sense[/url] mod.
    settings:
      - name: haulBeforeBill

  - title: Optimize hauling supplies
    at: 1.0.0
    desc: |-
      If hauling supplies to storage would bring them closer to their blueprint, do that first (grabbing extra).
    steam: |-
      If you've ever seen your builder cross the map to retrieve a [b]single[/b] component.
      {desc}

      [img]https://i.imgur.com/G2oh7Mm.png[/img]
    settings:
      - name: haulBeforeSupply

  - title: Skip when bleeding
    at: 1.1.0
    desc: |-
      Don't take jobs of opportunity when bleeding.
      "Optimize hauling" features still apply since they (hopefully) expedite a job.
    settings:
      - name: skipIfBleeding

updates:
  - at: 1.0.0
    desc: |-
      • Support for [url=https://steamcommunity.com/sharedfiles/filedetails/?id=2277459062][i]Mehni's[/i] Pick Up And Haul[/url]!

  - at: 1.1.0
    desc: |-
      • Updated [i]Optimize hauling supplies[/i]
      Now works as expected: instead of denying the inefficient supply job so [i]some[/i] hauler [i]eventually[/i] hauls, the builder themselves will.

  - at: 1.2.0
    desc: |-
      • Hauls are substantially improved on the default "recommended" setting. No longer should distant wood cut or metal mined be neglected.
      (I've integrated the very last vanilla pathing check into this mod's magic.)

      • Setting tooltips updated with detailed descriptions.

  - at: 1.5.0
    desc: |-
      • New job descriptions:
      |img:jobReport|caption:If you don't see this, it's standard hauling or a different mod.|
      • Added [i]Enabled[/i] setting for troubleshooting without restarts.
      • Improved settings and descriptions.

  - at: 1.5.1
    credit: '@"Saken"SakenW'
    desc: |-
      • Compatibility with [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1233893175][i]KV's[/i] Infinite Storage[/url]: [i]Optimize hauling supplies[/i] should now work instead of looping on storage and retrieval.

  - at: 1.6.1
    credit: '@Gwyndolin-chan#8975'
    desc: |-
      • Fixed "Optimize hauling ingredients" to no longer cause "Standing" loop when incapable. (Missed a basic check vanilla already did in the "Optimize hauling supplies" scenario.)

  - at: 1.6.2
    credit: '@Just#1021'
    desc: |-
      • Fixed "Optimize hauling ingredients/supplies" to no longer cause "Standing" loop when ingredient is in a pawn inventory. Fixes surgery with [i]Smart Medicine[/i], compatibility with [i]Build From Inventory[/i], and others.

settings:
  - name: enabled
    title: Enabled
    desc: |-
      Toggle mod without restarting.

      Off is equivalent to disabling all features, resetting each vanilla parameter, and "initial closeness" set to "(vanilla)".

  - name: haulToInventory
    title: Use & improve Pick Up And Haul
    desc: |-
      Controls both efficient unloading and using inventory for opportunistic hauls.

  - name: haulProximities
    title: Haulable & storage initial closeness
    desc: |-
      For performance reasons vanilla doesn't calculate and sort all haul paths to find opportunities, instead it settles for the first found with a haulable near our starting position, and its storage near our job destination. I've made these parameters configurable (marked with ¹).

      Since other parameters do well in limiting travel distance (marked with ²) we can change this from a requirement to simply a preference for closer hauls.

      If performance is an issue, set this stricter to reduce available hauls.
      If straight-line distance poorly represents your actual haul paths, set this stricter and adjust "max region look count"¹.

  - name: haulProximities_Both
    title: Both required (vanilla)
  - name: haulProximities_Either
    title: Either required
  - name: haulProximities_Ignored
    title: Preferred (recommended)

  - name: drawOpportunisticJobs
    title: Draw opportunistic jobs
    desc: |-
      Paths are colored red, green, blue.
      start →ᴿ haulable →ᴳ storage →ᴮ job

      (This is vanilla's [i]Development mode → inspector icon → Visibility → Draw Opportunistic Jobs, which is why it doesn't persist through restarts.)[/i]

  - name: showVanillaParameters
    title: Show opportunity parameters…
    desc: |-
      These settings are provided for explaining and tweaking vanilla's built-in opportunistic hauling.

      A value of 0 will skip a check.

  - name: maxNewLegsPctOrigTrip
    title: ²Max new legs % of original trip
    dist: &dist |-
      This is straight-line distance ("as the crow flies").
    desc: |-
      Max start-to-haulable + storage-to-job % of original trip.
      {dist}
  - name: maxTotalTripPctOrigTrip
    title: ²Max total trip % of original trip
    desc: *dist

  - name: maxStartToThing
    title: ¹Max start-to-haulable
    desc: *dist
  - name: maxStartToThingPctOrigTrip
    title: ¹Max start-to-haulable % of original trip
    desc: *dist
  - name: maxStartToThingRegionLookCount
    title: ¹Max start-to-haulable region look count
    desc: &region_look_count |-
      This parameter limits our actual pathing.
      To understand it, enable [i]Development mode → inspector icon → Visibility → Draw Regions[/i].

      Exploration begins from the start region spreading out to all neighbors until encountering the destination region. This setting caps the total number explored - even those in the wrong direction.

      It can't be calculated perfectly from distance, as regions will vary in size and neighbors. (A corridor has only forward and back, so they're explored further.)
      But in a completely open field, if a pawn must travel the distance of n=3 full-sized 12x12 regions (~36 tiles), the algorithm will explore 2(n^2+n)+1 or 25 regions.
  - name: maxStoreToJob
    title: ¹Max storage-to-job
    desc: *dist
  - name: maxStoreToJobPctOrigTrip
    title: ¹Max storage-to-job % of original trip
    desc: *dist
  - name: maxStoreToJobRegionLookCount
    title: ¹Max storage-to-job region look count
    desc: *region_look_count
