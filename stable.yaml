#parent=..\global.yaml
---
repo: &repo https://github.com/CodeOptimist/rimworld-jobs-of-opportunity

_anchors:
  - !parent &global_ModMetaData ModMetaData

ModMetaData: !merge
  <: *global_ModMetaData
  url: *repo
  name: Jobs of Opportunity (While You're Up)
  packageId: CodeOptimist.JobsOfOpportunity
  supportedVersions:
    - 1.1
    - 1.2
    - 1.3
  incompatibleWith:
    - hoodie.whileyoureup
    - kevlou127.WhileHYouOreHUpHQ1V0S

published_file_id: 2034960453
preview_from_path: '{out_dir}\..\JoO.png'

intro: |-
  [b]Opportunistic hauling and [i]Pick Up And Haul[/i] upgrades.[/b]
  Compatible with existing saves. Any load order.

steam_intro: |-
  {intro}

  [img]https://i.imgur.com/tbpLbha.gif[/img]

header: |-
  [b]A pawn's job will say "Opportunistically", "Optimally", or "Efficiently unloading", otherwise it's a different mod[/b] (e.g. normal hauling; normal hauling with [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1279012058]Pick Up And Haul[/url], or triggered by [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1561769193]Common Sense[/url]).

  [i]Pick Up And Haul[/i] is optional and installed separately.

  "But my pawns are walking farther!"
  Yes. A slightly longer journey now to avoid a [i]much[/i] longer journey next time.

footer: |-


  [h1]Compatibility[/h1]
  [i]Common Sense?[/i] Yes.
  [i]Deep Storage? Infinite Storage? Simple Storage? OgreStack? RimFridge? RimFactory?[/i]
  As of v2.1.0, we only work with stockpiles by default - so it's safe to use with any of these.
  In the next version there will be an allow-list for non-vanilla storage buildings!

  [i]@Modders:[/i] if you set [i]allowOpportunisticPrefix[/i] to [i]false[/i] for a JobDef, it won't allow opportunistic jobs. This is a vanilla feature.

  [h1]Performance[/h1]
  Vanilla's opportunistic hauling was well-optimized for performance, which this mod painstakingly preserves in its enhancements.
  Likewise we aggressively cache all haul destination lookups for all features.

  [h1]Known Issues[/h1]
  [i]Pawns not taking into account travel time around walls.[/i]
  Unfortunately this is a consequence of the straight-line "as the crow flies" math in the vanilla code for opportunities. If this is a huge problem for your map, set [i]Haulable & storage initial closeness[/i] to a stricter setting. Your pawns will find less opportunities.
  This is how vanilla mitigates the problem while still being performant. A good solution is for me to add an option for true pathfinding for those whose machines can handle it.
  Alternatively, build a door. 😉

  [h1]Report Bugs[/h1]
  1. Please save a game when it occurs, then reload to verify it reoccurs.
  2. Disable the mod from its own options menu - did the bug stop? If so...
  3. Send me your save ([i]Options → Open save data folder[/i]). (They zip much smaller.)
  [b]I can now fix your bug in [i]days[/i] instead of [i]months[/i]! 🎉🥳[/b]

  [h1]History[/h1]
  I intended to [url=https://gist.github.com/CodeOptimist/5a740dd803fc370ec43f22ffa8bc953d#file-utils-cs-L48]fork[/url] [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1544626521]While You're Up[/url], until I saw [url=https://github.com/CodeOptimist/rimworld-jobs-of-opportunity/blob/29391b0a075a1dd77d4788777b0137e26390328c/Source/Patch_TryOpportunisticJob.cs]RimWorld 1.0 added it[/url]. This mod improves vanilla's integration, and so is a spiritual successor to [i]While You're Up[/i] 💜.

features:
  - title: Better unloading for [i]Pick Up And Haul[/i]
    at: 2.0.0
    desc: |-
      [i]Pick Up And Haul[/i] is modified so pawns will no longer unload back-and-forth between stockpiles, but choose an efficient path. This is all hauls, not just opportunities!

  - title: Opportunistic hauls
    at: 1.0.0
    desc: |-
      Vanilla has support for opportunities, but with limitations: haulable near your [b]start[/b] position, and stockpile near your job.
      We prefer these, but drop them as requirements to include hauls along the path.

  - title: Opportunity support for [i]Pick Up And Haul[/i]
    at: 1.4.0
    desc: |-
      [i]Pick Up And Haul[/i] is not just triggered for an opportune haulable, but modified to carefully grab only surrounding items whose unload path is also opportunistic.

  - title: Optimize hauling ingredients
    at: 1.6.0
    desc: |-
      If hauling ingredients to storage would bring them closer to their workbench, do that first (grabbing extra).
    settings:
      - name: HaulBeforeBill

  - title: Optimize hauling supplies
    at: 1.0.0
    desc: |-
      If hauling supplies to storage would bring them closer to their blueprint, do that first (grabbing extra).
    steam: |-
      Your builder will never again cross the map to retrieve a [b]single[/b] component.

      [img]https://i.imgur.com/G2oh7Mm.png[/img]
    settings:
      - name: HaulBeforeSupply

updates:
  - at: 1.0.0
    desc: |-
      • Support for [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1279012058][i]Mehni's[/i] Pick Up And Haul[/url]!

  - at: 1.1.0
    desc: |-
      • Updated [i]Optimize hauling supplies[/i]
      Now works as expected: instead of denying the inefficient supply job so [i]some[/i] hauler [i]eventually[/i] hauls, the builder themselves will.

  - at: 1.2.0
    desc: |-
      • Hauls are substantially improved on the default "recommended" setting. No longer should distant wood cut or metal mined be neglected.
      (I've integrated the very last vanilla pathing check into this mod's magic.)

      • Setting tooltips updated with detailed descriptions.

  - at: 1.5.0
    desc: |-
      • New job descriptions:
      |img:jobReport|caption:If you don't see this, it's standard hauling or a different mod.|
      • Added [i]Enabled[/i] setting for troubleshooting without restarts.
      • Improved settings and descriptions.

  - at: 1.5.1
    credit: https://steamcommunity.com/id/SakenW
    desc: |-
      • Compatibility with [url=https://steamcommunity.com/sharedfiles/filedetails/?id=1233893175][i]KV's[/i] Infinite Storage[/url]: [i]Optimize hauling supplies[/i] should now work instead of looping on storage and retrieval.

  - at: 1.6.1
    credit: Gwyndolin-chan#8975
    desc: |-
      • Fixed "Optimize hauling ingredients" to no longer cause "Standing" loop when incapable. (Missed a basic check vanilla already did in the "Optimize hauling supplies" scenario.)

  - at: 1.6.2
    credit: Just#1021
    desc: |-
      • Fixed "Optimize hauling ingredients/supplies" to no longer cause "Standing" loop when ingredient is in a pawn inventory. Fixes surgery with [i]Smart Medicine[/i], compatibility with [i]Build From Inventory[/i], and others.

  - at: 2.0.0
    credit: Kellogg''s#0574
    haul_to_equal_priority: &haulToEqualPriority Allow "Optimize hauling" to same-priority
    desc: |-
      • [i]Optimize hauling ingredients/supplies[/i] will trigger more often:
           - Fixed hauling from existing storage, not just un-stored.
           - New [i]{haul_to_equal_priority}[/i] setting.
           - Checks closest storage (to destination, not item) for closeness to destination.

  # wrapping issues in HugsLib news from e.g. "Prefix " instead of "Prefix"
  - at: 2.0.0
    desc: |-
      • Added "Optimally" and "Efficiently unloading" job prefixes (like "Opportunistically").
      • Updated "Draw opportunistic jobs" to include optimized hauls (magenta & cyan).
      • Updated for RimWorld 1.3.

  - at: 2.1.0
    desc: |-
      • Improving storage mod compatibility:
        - Added "Stockpiles only" setting (on by default).
        - Changed 'Allow "Optimize hauling" to same-priority' to only deliver to stockpiles.
            Automatically turned on (new default). Disable it manually if issues.
        - Switched to vanilla-style settings window (future room for a storage building allow-list).

      • Setting for "Draw opportunistic & optimal jobs" is now saved.
          Try it out, it's fun! See tooltip for description.

  - at: 2.1.1
    credit: https://steamcommunity.com/profiles/76561198110437158
    desc: |-
      • Fixed hauling loop issue with PUAH, chunks, and multiple dumping stockpiles.

  - at: 2.1.2
    credit: https://steamcommunity.com/id/macbuk
    desc: |-
      • Fixed inventory hauling check to work with non-Pawns (e.g. [i]Misc. Robots[/i] mod).

settings:
  - name: Enabled
    title: Enabled
    desc: |-
      Toggle mod without restarting.

      Off is equivalent to disabling all features, resetting each vanilla parameter, and "initial closeness" set to "(vanilla)".

  - name: SkipIfBleeding
    at: 1.1.0
    title: Skip when bleeding
    desc: |-
      Don't take jobs of opportunity when bleeding.
      "Optimize hauling" features still apply since they (hopefully) expedite a job.

  - name: StockpilesOnly
    title: Stockpiles only
    desc: |-
      Only work with stockpiles. (There will be an allow-list for all building storage in the future.)

  - name: HaulToInventory
    title: Use & improve Pick Up And Haul
    desc: |-
      Controls both efficient unloading and using inventory for opportunistic hauls.

  - name: HaulToEqualPriority
    title: *haulToEqualPriority
    desc: |-
      This modifies "Optimize hauling" to include delivery to stockpiles (only) of same-priority storage.

  - name: HaulProximities
    title: Haulable & storage initial closeness
    desc: |-
      For performance reasons vanilla doesn't calculate and sort all haul paths to find opportunities, instead it settles for the first found with a haulable near our starting position, and its storage near our job destination. I've made these parameters configurable (marked with ¹).

      Since other parameters do well in limiting travel distance (marked with ²) we can change this from a requirement to simply a preference for closer hauls.

      If performance is an issue, set this stricter to reduce available hauls.
      If straight-line distance poorly represents your actual haul paths, set this stricter and adjust "max region look count"¹.

  - name: HaulProximities_Both
    title: Both required (vanilla)
  - name: HaulProximities_Either
    title: Either required
  - name: HaulProximities_Ignored
    title: Preferred (recommended)

  - name: DrawOpportunisticJobs
    title: Draw opportunistic & optimal jobs
    desc: |-
      Original job paths are red, new opportunistic paths are green.
      Original ingredient/supply paths are magenta, new optimal paths are cyan.

      (This is sync'd to vanilla's [i]Development mode → inspector icon → Visibility → Draw Opportunistic Jobs[/i].)

  - name: ShowVanillaParameters
    title: Show opportunity parameters…
    desc: |-
      These settings are provided for explaining and tweaking vanilla's built-in opportunistic hauling.

      A value of 0 will skip a check.

  - name: MaxNewLegsPctOrigTrip
    title: ²Max new legs % of original trip
    dist: &dist |-
      This is straight-line distance ("as the crow flies").
    desc: |-
      Max start-to-haulable + storage-to-job % of original trip.
      {dist}
  - name: MaxTotalTripPctOrigTrip
    title: ²Max total trip % of original trip
    desc: *dist

  - name: MaxStartToThing
    title: ¹Max start-to-haulable
    desc: *dist
  - name: MaxStartToThingPctOrigTrip
    title: ¹Max start-to-haulable % of original trip
    desc: *dist
  - name: MaxStartToThingRegionLookCount
    title: ¹Max start-to-haulable region look count
    desc: &region_look_count |-
      This parameter limits our actual pathing.
      To understand it, enable [i]Development mode → inspector icon → Visibility → Draw Regions[/i].

      Exploration begins from the start region spreading out to all neighbors until encountering the destination region. This setting caps the total number explored - even those in the wrong direction.

      It can't be calculated perfectly from distance, as regions will vary in size and neighbors. (A corridor has only forward and back, so they're explored further.)
      But in a completely open field, if a pawn must travel the distance of n=3 full-sized 12x12 regions (~36 tiles), the algorithm will explore 2(n^2+n)+1 or 25 regions.
  - name: MaxStoreToJob
    title: ¹Max storage-to-job
    desc: *dist
  - name: MaxStoreToJobPctOrigTrip
    title: ¹Max storage-to-job % of original trip
    desc: *dist
  - name: MaxStoreToJobRegionLookCount
    title: ¹Max storage-to-job region look count
    desc: *region_look_count
